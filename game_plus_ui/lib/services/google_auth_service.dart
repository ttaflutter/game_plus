import 'package:google_sign_in/google_sign_in.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'auth_service.dart';
import '../schemas/auth_schemas.dart';

class GoogleAuthService {
  // Kh·ªüi t·∫°o GoogleSignIn
  // Web c·∫ßn clientId ri√™ng, mobile t·ª± ƒë·ªông l·∫•y t·ª´ config
  final GoogleSignIn _googleSignIn = GoogleSignIn(
    scopes: ['email', 'profile'],

    clientId: kIsWeb
        ? 'YOUR_WEB_CLIENT_ID.apps.googleusercontent.com' // THAY ƒê·ªîI N√ÄY!
        : null, // Mobile t·ª± ƒë·ªông detect
  );

  final AuthService _authService = AuthService();

  /// Sign in v·ªõi Google v√† g·ª≠i th√¥ng tin ƒë·∫øn backend
  Future<TokenResponse> signInWithGoogle() async {
    try {
      // 0. Sign out tr∆∞·ªõc ƒë·ªÉ user c√≥ th·ªÉ ch·ªçn t√†i kho·∫£n kh√°c
      // Kh√¥ng d√πng t√†i kho·∫£n ƒë√£ cache
      await _googleSignIn.signOut();

      // 1. Trigger Google Sign In flow
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        // User cancelled the sign-in
        throw Exception('Google Sign-In cancelled by user');
      }

      // 2. L·∫•y th√¥ng tin authentication
      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;

      // 3. L·∫•y ID token (optional, ch·ªâ c·∫ßn ƒë·ªÉ verify)
      final String? idToken = googleAuth.idToken;
      final String? accessToken = googleAuth.accessToken;

      print('üîë ID Token: ${idToken != null ? "‚úÖ Available" : "‚ùå Null"}');
      print(
        'üîë Access Token: ${accessToken != null ? "‚úÖ Available" : "‚ùå Null"}',
      );

      // ID token c√≥ th·ªÉ null tr√™n m·ªôt s·ªë platform/config
      // Nh∆∞ng v·∫´n c√≥ th·ªÉ l·∫•y user info t·ª´ GoogleSignInAccount
      if (idToken == null && accessToken == null) {
        throw Exception(
          'Failed to get Google authentication tokens. '
          'Please check:\n'
          '1. SHA-1 fingerprint ƒë√£ add v√†o Google Cloud Console ch∆∞a?\n'
          '2. OAuth consent screen ƒë√£ setup ch∆∞a?\n'
          '3. ƒê·ª£i 5-10 ph√∫t sau khi config xong.\n'
          'Run: cd android && gradlew signingReport',
        );
      }

      // 4. Parse user info
      final String email = googleUser.email;
      final String? name = googleUser.displayName;
      final String? avatarUrl = googleUser.photoUrl;
      final String sub = googleUser.id; // Google User ID

      print('üìß Google User: $email');
      print('üë§ Name: $name');
      print('üÜî Google ID (sub): $sub');

      // 5. G·ª≠i th√¥ng tin ƒë·∫øn backend ƒë·ªÉ t·∫°o/login user
      final tokenResponse = await _authService.loginWithGoogle(
        email: email,
        name: name ?? email.split('@')[0],
        sub: sub,
        avatarUrl: avatarUrl,
      );

      print('‚úÖ Google Login successful!');
      return tokenResponse;
    } catch (e) {
      print('‚ùå Google Sign-In error: $e');
      rethrow;
    }
  }

  /// Sign out
  Future<void> signOut() async {
    await _googleSignIn.signOut();
    await _authService.logout();
  }

  /// Check if user is currently signed in with Google
  Future<bool> isSignedIn() async {
    return await _googleSignIn.isSignedIn();
  }

  /// Get current Google user (if signed in)
  Future<GoogleSignInAccount?> getCurrentUser() async {
    return _googleSignIn.currentUser;
  }
}
